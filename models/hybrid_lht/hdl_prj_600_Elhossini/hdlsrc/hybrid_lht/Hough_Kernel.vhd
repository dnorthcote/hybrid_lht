-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_600_Elhossini\hdlsrc\hybrid_lht\Hough_Kernel.vhd
-- Created: 2020-03-05 10:35:23
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Hough_Kernel
-- Source Path: hybrid_lht/Hybrid LHT/Hybrid LHT Kernel/Gradient Kernel System/Hough Kernel/Hough Kernel
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Hybrid_LHT_pkg.ALL;

ENTITY Hough_Kernel IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        X                                 :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
        Y                                 :   IN    vector_of_std_logic_vector10(0 TO 17);  -- sfix10 [18]
        Index                             :   IN    vector_of_std_logic_vector8(0 TO 5);  -- uint8 [6]
        Rho                               :   OUT   vector_of_std_logic_vector10(0 TO 5)  -- sfix10 [6]
        );
END Hough_Kernel;


ARCHITECTURE rtl OF Hough_Kernel IS

  -- Signals
  SIGNAL X_signed                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL X_1                              : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Index_0                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL CosineROM_out1                   : vector_of_signed16(0 TO 17);  -- sfix16_En14 [18]
  SIGNAL Selector_out1_0                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Index_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector_out1_1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Index_2                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector_out1_2                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Index_3                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector_out1_3                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Index_4                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector_out1_4                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Index_5                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector_out1_5                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Selector_out1                    : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL Selector_out1_6                  : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL xcos_out1                        : vector_of_signed26(0 TO 5);  -- sfix26_En14 [6]
  SIGNAL Index_0_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Index_1_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Index_2_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Index_3_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Index_4_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Index_5_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch_out_1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch_1_reg                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_out_2                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch_out_3                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch_out_4                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch_out_5                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch_out_6                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch_1_reg_1               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_2               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_3               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_4               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_5               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Y_signed                         : vector_of_signed10(0 TO 17);  -- sfix10 [18]
  SIGNAL Selector1_out1_0                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Selector1_out1_1                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Selector1_out1_2                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Selector1_out1_3                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Selector1_out1_4                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL xcos_out1_1                      : vector_of_signed26(0 TO 5);  -- sfix26_En14 [6]
  SIGNAL xcos_out1_2                      : vector_of_signed10(0 TO 5);  -- sfix10 [6]
  SIGNAL Selector1_out1_5                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Selector1_out1                   : vector_of_signed10(0 TO 5);  -- sfix10 [6]
  SIGNAL Add_out1                         : vector_of_signed10(0 TO 5);  -- sfix10 [6]

BEGIN
  X_signed <= signed(X);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      X_1 <= to_signed(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        X_1 <= X_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Index_0 <= unsigned(Index(0));

  CosineROM_out1(0) <= to_signed(16#4000#, 16);
  CosineROM_out1(1) <= to_signed(16#3F07#, 16);
  CosineROM_out1(2) <= to_signed(16#3C24#, 16);
  CosineROM_out1(3) <= to_signed(16#376D#, 16);
  CosineROM_out1(4) <= to_signed(16#3107#, 16);
  CosineROM_out1(5) <= to_signed(16#2923#, 16);
  CosineROM_out1(6) <= to_signed(16#2000#, 16);
  CosineROM_out1(7) <= to_signed(16#15E4#, 16);
  CosineROM_out1(8) <= to_signed(16#0B1D#, 16);
  CosineROM_out1(9) <= to_signed(16#0000#, 16);
  CosineROM_out1(10) <= to_signed(-16#0B1D#, 16);
  CosineROM_out1(11) <= to_signed(-16#15E4#, 16);
  CosineROM_out1(12) <= to_signed(-16#2000#, 16);
  CosineROM_out1(13) <= to_signed(-16#2923#, 16);
  CosineROM_out1(14) <= to_signed(-16#3107#, 16);
  CosineROM_out1(15) <= to_signed(-16#376D#, 16);
  CosineROM_out1(16) <= to_signed(-16#3C24#, 16);
  CosineROM_out1(17) <= to_signed(-16#3F07#, 16);

  
  Selector_out1_0 <= CosineROM_out1(0) WHEN Index_0 = to_unsigned(16#00#, 8) ELSE
      CosineROM_out1(1) WHEN Index_0 = to_unsigned(16#01#, 8) ELSE
      CosineROM_out1(2) WHEN Index_0 = to_unsigned(16#02#, 8) ELSE
      CosineROM_out1(3) WHEN Index_0 = to_unsigned(16#03#, 8) ELSE
      CosineROM_out1(4) WHEN Index_0 = to_unsigned(16#04#, 8) ELSE
      CosineROM_out1(5) WHEN Index_0 = to_unsigned(16#05#, 8) ELSE
      CosineROM_out1(6) WHEN Index_0 = to_unsigned(16#06#, 8) ELSE
      CosineROM_out1(7) WHEN Index_0 = to_unsigned(16#07#, 8) ELSE
      CosineROM_out1(8) WHEN Index_0 = to_unsigned(16#08#, 8) ELSE
      CosineROM_out1(9) WHEN Index_0 = to_unsigned(16#09#, 8) ELSE
      CosineROM_out1(10) WHEN Index_0 = to_unsigned(16#0A#, 8) ELSE
      CosineROM_out1(11) WHEN Index_0 = to_unsigned(16#0B#, 8) ELSE
      CosineROM_out1(12) WHEN Index_0 = to_unsigned(16#0C#, 8) ELSE
      CosineROM_out1(13) WHEN Index_0 = to_unsigned(16#0D#, 8) ELSE
      CosineROM_out1(14) WHEN Index_0 = to_unsigned(16#0E#, 8) ELSE
      CosineROM_out1(15) WHEN Index_0 = to_unsigned(16#0F#, 8) ELSE
      CosineROM_out1(16) WHEN Index_0 = to_unsigned(16#10#, 8) ELSE
      CosineROM_out1(17);

  Index_1 <= unsigned(Index(1));

  
  Selector_out1_1 <= CosineROM_out1(0) WHEN Index_1 = to_unsigned(16#00#, 8) ELSE
      CosineROM_out1(1) WHEN Index_1 = to_unsigned(16#01#, 8) ELSE
      CosineROM_out1(2) WHEN Index_1 = to_unsigned(16#02#, 8) ELSE
      CosineROM_out1(3) WHEN Index_1 = to_unsigned(16#03#, 8) ELSE
      CosineROM_out1(4) WHEN Index_1 = to_unsigned(16#04#, 8) ELSE
      CosineROM_out1(5) WHEN Index_1 = to_unsigned(16#05#, 8) ELSE
      CosineROM_out1(6) WHEN Index_1 = to_unsigned(16#06#, 8) ELSE
      CosineROM_out1(7) WHEN Index_1 = to_unsigned(16#07#, 8) ELSE
      CosineROM_out1(8) WHEN Index_1 = to_unsigned(16#08#, 8) ELSE
      CosineROM_out1(9) WHEN Index_1 = to_unsigned(16#09#, 8) ELSE
      CosineROM_out1(10) WHEN Index_1 = to_unsigned(16#0A#, 8) ELSE
      CosineROM_out1(11) WHEN Index_1 = to_unsigned(16#0B#, 8) ELSE
      CosineROM_out1(12) WHEN Index_1 = to_unsigned(16#0C#, 8) ELSE
      CosineROM_out1(13) WHEN Index_1 = to_unsigned(16#0D#, 8) ELSE
      CosineROM_out1(14) WHEN Index_1 = to_unsigned(16#0E#, 8) ELSE
      CosineROM_out1(15) WHEN Index_1 = to_unsigned(16#0F#, 8) ELSE
      CosineROM_out1(16) WHEN Index_1 = to_unsigned(16#10#, 8) ELSE
      CosineROM_out1(17);

  Index_2 <= unsigned(Index(2));

  
  Selector_out1_2 <= CosineROM_out1(0) WHEN Index_2 = to_unsigned(16#00#, 8) ELSE
      CosineROM_out1(1) WHEN Index_2 = to_unsigned(16#01#, 8) ELSE
      CosineROM_out1(2) WHEN Index_2 = to_unsigned(16#02#, 8) ELSE
      CosineROM_out1(3) WHEN Index_2 = to_unsigned(16#03#, 8) ELSE
      CosineROM_out1(4) WHEN Index_2 = to_unsigned(16#04#, 8) ELSE
      CosineROM_out1(5) WHEN Index_2 = to_unsigned(16#05#, 8) ELSE
      CosineROM_out1(6) WHEN Index_2 = to_unsigned(16#06#, 8) ELSE
      CosineROM_out1(7) WHEN Index_2 = to_unsigned(16#07#, 8) ELSE
      CosineROM_out1(8) WHEN Index_2 = to_unsigned(16#08#, 8) ELSE
      CosineROM_out1(9) WHEN Index_2 = to_unsigned(16#09#, 8) ELSE
      CosineROM_out1(10) WHEN Index_2 = to_unsigned(16#0A#, 8) ELSE
      CosineROM_out1(11) WHEN Index_2 = to_unsigned(16#0B#, 8) ELSE
      CosineROM_out1(12) WHEN Index_2 = to_unsigned(16#0C#, 8) ELSE
      CosineROM_out1(13) WHEN Index_2 = to_unsigned(16#0D#, 8) ELSE
      CosineROM_out1(14) WHEN Index_2 = to_unsigned(16#0E#, 8) ELSE
      CosineROM_out1(15) WHEN Index_2 = to_unsigned(16#0F#, 8) ELSE
      CosineROM_out1(16) WHEN Index_2 = to_unsigned(16#10#, 8) ELSE
      CosineROM_out1(17);

  Index_3 <= unsigned(Index(3));

  
  Selector_out1_3 <= CosineROM_out1(0) WHEN Index_3 = to_unsigned(16#00#, 8) ELSE
      CosineROM_out1(1) WHEN Index_3 = to_unsigned(16#01#, 8) ELSE
      CosineROM_out1(2) WHEN Index_3 = to_unsigned(16#02#, 8) ELSE
      CosineROM_out1(3) WHEN Index_3 = to_unsigned(16#03#, 8) ELSE
      CosineROM_out1(4) WHEN Index_3 = to_unsigned(16#04#, 8) ELSE
      CosineROM_out1(5) WHEN Index_3 = to_unsigned(16#05#, 8) ELSE
      CosineROM_out1(6) WHEN Index_3 = to_unsigned(16#06#, 8) ELSE
      CosineROM_out1(7) WHEN Index_3 = to_unsigned(16#07#, 8) ELSE
      CosineROM_out1(8) WHEN Index_3 = to_unsigned(16#08#, 8) ELSE
      CosineROM_out1(9) WHEN Index_3 = to_unsigned(16#09#, 8) ELSE
      CosineROM_out1(10) WHEN Index_3 = to_unsigned(16#0A#, 8) ELSE
      CosineROM_out1(11) WHEN Index_3 = to_unsigned(16#0B#, 8) ELSE
      CosineROM_out1(12) WHEN Index_3 = to_unsigned(16#0C#, 8) ELSE
      CosineROM_out1(13) WHEN Index_3 = to_unsigned(16#0D#, 8) ELSE
      CosineROM_out1(14) WHEN Index_3 = to_unsigned(16#0E#, 8) ELSE
      CosineROM_out1(15) WHEN Index_3 = to_unsigned(16#0F#, 8) ELSE
      CosineROM_out1(16) WHEN Index_3 = to_unsigned(16#10#, 8) ELSE
      CosineROM_out1(17);

  Index_4 <= unsigned(Index(4));

  
  Selector_out1_4 <= CosineROM_out1(0) WHEN Index_4 = to_unsigned(16#00#, 8) ELSE
      CosineROM_out1(1) WHEN Index_4 = to_unsigned(16#01#, 8) ELSE
      CosineROM_out1(2) WHEN Index_4 = to_unsigned(16#02#, 8) ELSE
      CosineROM_out1(3) WHEN Index_4 = to_unsigned(16#03#, 8) ELSE
      CosineROM_out1(4) WHEN Index_4 = to_unsigned(16#04#, 8) ELSE
      CosineROM_out1(5) WHEN Index_4 = to_unsigned(16#05#, 8) ELSE
      CosineROM_out1(6) WHEN Index_4 = to_unsigned(16#06#, 8) ELSE
      CosineROM_out1(7) WHEN Index_4 = to_unsigned(16#07#, 8) ELSE
      CosineROM_out1(8) WHEN Index_4 = to_unsigned(16#08#, 8) ELSE
      CosineROM_out1(9) WHEN Index_4 = to_unsigned(16#09#, 8) ELSE
      CosineROM_out1(10) WHEN Index_4 = to_unsigned(16#0A#, 8) ELSE
      CosineROM_out1(11) WHEN Index_4 = to_unsigned(16#0B#, 8) ELSE
      CosineROM_out1(12) WHEN Index_4 = to_unsigned(16#0C#, 8) ELSE
      CosineROM_out1(13) WHEN Index_4 = to_unsigned(16#0D#, 8) ELSE
      CosineROM_out1(14) WHEN Index_4 = to_unsigned(16#0E#, 8) ELSE
      CosineROM_out1(15) WHEN Index_4 = to_unsigned(16#0F#, 8) ELSE
      CosineROM_out1(16) WHEN Index_4 = to_unsigned(16#10#, 8) ELSE
      CosineROM_out1(17);

  Index_5 <= unsigned(Index(5));

  
  Selector_out1_5 <= CosineROM_out1(0) WHEN Index_5 = to_unsigned(16#00#, 8) ELSE
      CosineROM_out1(1) WHEN Index_5 = to_unsigned(16#01#, 8) ELSE
      CosineROM_out1(2) WHEN Index_5 = to_unsigned(16#02#, 8) ELSE
      CosineROM_out1(3) WHEN Index_5 = to_unsigned(16#03#, 8) ELSE
      CosineROM_out1(4) WHEN Index_5 = to_unsigned(16#04#, 8) ELSE
      CosineROM_out1(5) WHEN Index_5 = to_unsigned(16#05#, 8) ELSE
      CosineROM_out1(6) WHEN Index_5 = to_unsigned(16#06#, 8) ELSE
      CosineROM_out1(7) WHEN Index_5 = to_unsigned(16#07#, 8) ELSE
      CosineROM_out1(8) WHEN Index_5 = to_unsigned(16#08#, 8) ELSE
      CosineROM_out1(9) WHEN Index_5 = to_unsigned(16#09#, 8) ELSE
      CosineROM_out1(10) WHEN Index_5 = to_unsigned(16#0A#, 8) ELSE
      CosineROM_out1(11) WHEN Index_5 = to_unsigned(16#0B#, 8) ELSE
      CosineROM_out1(12) WHEN Index_5 = to_unsigned(16#0C#, 8) ELSE
      CosineROM_out1(13) WHEN Index_5 = to_unsigned(16#0D#, 8) ELSE
      CosineROM_out1(14) WHEN Index_5 = to_unsigned(16#0E#, 8) ELSE
      CosineROM_out1(15) WHEN Index_5 = to_unsigned(16#0F#, 8) ELSE
      CosineROM_out1(16) WHEN Index_5 = to_unsigned(16#10#, 8) ELSE
      CosineROM_out1(17);

  Selector_out1(0) <= Selector_out1_0;
  Selector_out1(1) <= Selector_out1_1;
  Selector_out1(2) <= Selector_out1_2;
  Selector_out1(3) <= Selector_out1_3;
  Selector_out1(4) <= Selector_out1_4;
  Selector_out1(5) <= Selector_out1_5;

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Selector_out1_6 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Selector_out1_6 <= Selector_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;



  xcos_out1_gen: FOR t_0 IN 0 TO 5 GENERATE
    xcos_out1(t_0) <= X_1 * Selector_out1_6(t_0);
  END GENERATE xcos_out1_gen;


  Index_0_1 <= unsigned(Index(0));

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_1_reg <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_1 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_2 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_3 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_4 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_5 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_1_reg(0) <= Index_0_1;
        delayMatch_1_reg(1) <= delayMatch_1_reg(0);
        delayMatch_1_reg_1(0) <= Index_1_1;
        delayMatch_1_reg_1(1) <= delayMatch_1_reg_1(0);
        delayMatch_1_reg_2(0) <= Index_2_1;
        delayMatch_1_reg_2(1) <= delayMatch_1_reg_2(0);
        delayMatch_1_reg_3(0) <= Index_3_1;
        delayMatch_1_reg_3(1) <= delayMatch_1_reg_3(0);
        delayMatch_1_reg_4(0) <= Index_4_1;
        delayMatch_1_reg_4(1) <= delayMatch_1_reg_4(0);
        delayMatch_1_reg_5(0) <= Index_5_1;
        delayMatch_1_reg_5(1) <= delayMatch_1_reg_5(0);
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;

  delayMatch_out_1 <= delayMatch_1_reg(1);
  delayMatch_out_2 <= delayMatch_1_reg_1(1);
  delayMatch_out_3 <= delayMatch_1_reg_2(1);
  delayMatch_out_4 <= delayMatch_1_reg_3(1);
  delayMatch_out_5 <= delayMatch_1_reg_4(1);
  delayMatch_out_6 <= delayMatch_1_reg_5(1);

  outputgen1: FOR k IN 0 TO 17 GENERATE
    Y_signed(k) <= signed(Y(k));
  END GENERATE;

  
  Selector1_out1_0 <= Y_signed(0) WHEN delayMatch_out_1 = to_unsigned(16#00#, 8) ELSE
      Y_signed(1) WHEN delayMatch_out_1 = to_unsigned(16#01#, 8) ELSE
      Y_signed(2) WHEN delayMatch_out_1 = to_unsigned(16#02#, 8) ELSE
      Y_signed(3) WHEN delayMatch_out_1 = to_unsigned(16#03#, 8) ELSE
      Y_signed(4) WHEN delayMatch_out_1 = to_unsigned(16#04#, 8) ELSE
      Y_signed(5) WHEN delayMatch_out_1 = to_unsigned(16#05#, 8) ELSE
      Y_signed(6) WHEN delayMatch_out_1 = to_unsigned(16#06#, 8) ELSE
      Y_signed(7) WHEN delayMatch_out_1 = to_unsigned(16#07#, 8) ELSE
      Y_signed(8) WHEN delayMatch_out_1 = to_unsigned(16#08#, 8) ELSE
      Y_signed(9) WHEN delayMatch_out_1 = to_unsigned(16#09#, 8) ELSE
      Y_signed(10) WHEN delayMatch_out_1 = to_unsigned(16#0A#, 8) ELSE
      Y_signed(11) WHEN delayMatch_out_1 = to_unsigned(16#0B#, 8) ELSE
      Y_signed(12) WHEN delayMatch_out_1 = to_unsigned(16#0C#, 8) ELSE
      Y_signed(13) WHEN delayMatch_out_1 = to_unsigned(16#0D#, 8) ELSE
      Y_signed(14) WHEN delayMatch_out_1 = to_unsigned(16#0E#, 8) ELSE
      Y_signed(15) WHEN delayMatch_out_1 = to_unsigned(16#0F#, 8) ELSE
      Y_signed(16) WHEN delayMatch_out_1 = to_unsigned(16#10#, 8) ELSE
      Y_signed(17);

  Index_1_1 <= unsigned(Index(1));

  
  Selector1_out1_1 <= Y_signed(0) WHEN delayMatch_out_2 = to_unsigned(16#00#, 8) ELSE
      Y_signed(1) WHEN delayMatch_out_2 = to_unsigned(16#01#, 8) ELSE
      Y_signed(2) WHEN delayMatch_out_2 = to_unsigned(16#02#, 8) ELSE
      Y_signed(3) WHEN delayMatch_out_2 = to_unsigned(16#03#, 8) ELSE
      Y_signed(4) WHEN delayMatch_out_2 = to_unsigned(16#04#, 8) ELSE
      Y_signed(5) WHEN delayMatch_out_2 = to_unsigned(16#05#, 8) ELSE
      Y_signed(6) WHEN delayMatch_out_2 = to_unsigned(16#06#, 8) ELSE
      Y_signed(7) WHEN delayMatch_out_2 = to_unsigned(16#07#, 8) ELSE
      Y_signed(8) WHEN delayMatch_out_2 = to_unsigned(16#08#, 8) ELSE
      Y_signed(9) WHEN delayMatch_out_2 = to_unsigned(16#09#, 8) ELSE
      Y_signed(10) WHEN delayMatch_out_2 = to_unsigned(16#0A#, 8) ELSE
      Y_signed(11) WHEN delayMatch_out_2 = to_unsigned(16#0B#, 8) ELSE
      Y_signed(12) WHEN delayMatch_out_2 = to_unsigned(16#0C#, 8) ELSE
      Y_signed(13) WHEN delayMatch_out_2 = to_unsigned(16#0D#, 8) ELSE
      Y_signed(14) WHEN delayMatch_out_2 = to_unsigned(16#0E#, 8) ELSE
      Y_signed(15) WHEN delayMatch_out_2 = to_unsigned(16#0F#, 8) ELSE
      Y_signed(16) WHEN delayMatch_out_2 = to_unsigned(16#10#, 8) ELSE
      Y_signed(17);

  Index_2_1 <= unsigned(Index(2));

  
  Selector1_out1_2 <= Y_signed(0) WHEN delayMatch_out_3 = to_unsigned(16#00#, 8) ELSE
      Y_signed(1) WHEN delayMatch_out_3 = to_unsigned(16#01#, 8) ELSE
      Y_signed(2) WHEN delayMatch_out_3 = to_unsigned(16#02#, 8) ELSE
      Y_signed(3) WHEN delayMatch_out_3 = to_unsigned(16#03#, 8) ELSE
      Y_signed(4) WHEN delayMatch_out_3 = to_unsigned(16#04#, 8) ELSE
      Y_signed(5) WHEN delayMatch_out_3 = to_unsigned(16#05#, 8) ELSE
      Y_signed(6) WHEN delayMatch_out_3 = to_unsigned(16#06#, 8) ELSE
      Y_signed(7) WHEN delayMatch_out_3 = to_unsigned(16#07#, 8) ELSE
      Y_signed(8) WHEN delayMatch_out_3 = to_unsigned(16#08#, 8) ELSE
      Y_signed(9) WHEN delayMatch_out_3 = to_unsigned(16#09#, 8) ELSE
      Y_signed(10) WHEN delayMatch_out_3 = to_unsigned(16#0A#, 8) ELSE
      Y_signed(11) WHEN delayMatch_out_3 = to_unsigned(16#0B#, 8) ELSE
      Y_signed(12) WHEN delayMatch_out_3 = to_unsigned(16#0C#, 8) ELSE
      Y_signed(13) WHEN delayMatch_out_3 = to_unsigned(16#0D#, 8) ELSE
      Y_signed(14) WHEN delayMatch_out_3 = to_unsigned(16#0E#, 8) ELSE
      Y_signed(15) WHEN delayMatch_out_3 = to_unsigned(16#0F#, 8) ELSE
      Y_signed(16) WHEN delayMatch_out_3 = to_unsigned(16#10#, 8) ELSE
      Y_signed(17);

  Index_3_1 <= unsigned(Index(3));

  
  Selector1_out1_3 <= Y_signed(0) WHEN delayMatch_out_4 = to_unsigned(16#00#, 8) ELSE
      Y_signed(1) WHEN delayMatch_out_4 = to_unsigned(16#01#, 8) ELSE
      Y_signed(2) WHEN delayMatch_out_4 = to_unsigned(16#02#, 8) ELSE
      Y_signed(3) WHEN delayMatch_out_4 = to_unsigned(16#03#, 8) ELSE
      Y_signed(4) WHEN delayMatch_out_4 = to_unsigned(16#04#, 8) ELSE
      Y_signed(5) WHEN delayMatch_out_4 = to_unsigned(16#05#, 8) ELSE
      Y_signed(6) WHEN delayMatch_out_4 = to_unsigned(16#06#, 8) ELSE
      Y_signed(7) WHEN delayMatch_out_4 = to_unsigned(16#07#, 8) ELSE
      Y_signed(8) WHEN delayMatch_out_4 = to_unsigned(16#08#, 8) ELSE
      Y_signed(9) WHEN delayMatch_out_4 = to_unsigned(16#09#, 8) ELSE
      Y_signed(10) WHEN delayMatch_out_4 = to_unsigned(16#0A#, 8) ELSE
      Y_signed(11) WHEN delayMatch_out_4 = to_unsigned(16#0B#, 8) ELSE
      Y_signed(12) WHEN delayMatch_out_4 = to_unsigned(16#0C#, 8) ELSE
      Y_signed(13) WHEN delayMatch_out_4 = to_unsigned(16#0D#, 8) ELSE
      Y_signed(14) WHEN delayMatch_out_4 = to_unsigned(16#0E#, 8) ELSE
      Y_signed(15) WHEN delayMatch_out_4 = to_unsigned(16#0F#, 8) ELSE
      Y_signed(16) WHEN delayMatch_out_4 = to_unsigned(16#10#, 8) ELSE
      Y_signed(17);

  Index_4_1 <= unsigned(Index(4));

  
  Selector1_out1_4 <= Y_signed(0) WHEN delayMatch_out_5 = to_unsigned(16#00#, 8) ELSE
      Y_signed(1) WHEN delayMatch_out_5 = to_unsigned(16#01#, 8) ELSE
      Y_signed(2) WHEN delayMatch_out_5 = to_unsigned(16#02#, 8) ELSE
      Y_signed(3) WHEN delayMatch_out_5 = to_unsigned(16#03#, 8) ELSE
      Y_signed(4) WHEN delayMatch_out_5 = to_unsigned(16#04#, 8) ELSE
      Y_signed(5) WHEN delayMatch_out_5 = to_unsigned(16#05#, 8) ELSE
      Y_signed(6) WHEN delayMatch_out_5 = to_unsigned(16#06#, 8) ELSE
      Y_signed(7) WHEN delayMatch_out_5 = to_unsigned(16#07#, 8) ELSE
      Y_signed(8) WHEN delayMatch_out_5 = to_unsigned(16#08#, 8) ELSE
      Y_signed(9) WHEN delayMatch_out_5 = to_unsigned(16#09#, 8) ELSE
      Y_signed(10) WHEN delayMatch_out_5 = to_unsigned(16#0A#, 8) ELSE
      Y_signed(11) WHEN delayMatch_out_5 = to_unsigned(16#0B#, 8) ELSE
      Y_signed(12) WHEN delayMatch_out_5 = to_unsigned(16#0C#, 8) ELSE
      Y_signed(13) WHEN delayMatch_out_5 = to_unsigned(16#0D#, 8) ELSE
      Y_signed(14) WHEN delayMatch_out_5 = to_unsigned(16#0E#, 8) ELSE
      Y_signed(15) WHEN delayMatch_out_5 = to_unsigned(16#0F#, 8) ELSE
      Y_signed(16) WHEN delayMatch_out_5 = to_unsigned(16#10#, 8) ELSE
      Y_signed(17);

  Index_5_1 <= unsigned(Index(5));

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xcos_out1_1 <= (OTHERS => to_signed(16#0000000#, 26));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xcos_out1_1 <= xcos_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;



  xcos_out1_2_gen: FOR ii IN 0 TO 5 GENERATE
    xcos_out1_2(ii) <= xcos_out1_1(ii)(23 DOWNTO 14) + ('0' & (xcos_out1_1(ii)(13) AND (( NOT xcos_out1_1(ii)(25)) OR (xcos_out1_1(ii)(12) OR xcos_out1_1(ii)(11) OR xcos_out1_1(ii)(10) OR xcos_out1_1(ii)(9) OR xcos_out1_1(ii)(8) OR xcos_out1_1(ii)(7) OR xcos_out1_1(ii)(6) OR xcos_out1_1(ii)(5) OR xcos_out1_1(ii)(4) OR xcos_out1_1(ii)(3) OR xcos_out1_1(ii)(2) OR xcos_out1_1(ii)(1) OR xcos_out1_1(ii)(0)))));
  END GENERATE xcos_out1_2_gen;


  
  Selector1_out1_5 <= Y_signed(0) WHEN delayMatch_out_6 = to_unsigned(16#00#, 8) ELSE
      Y_signed(1) WHEN delayMatch_out_6 = to_unsigned(16#01#, 8) ELSE
      Y_signed(2) WHEN delayMatch_out_6 = to_unsigned(16#02#, 8) ELSE
      Y_signed(3) WHEN delayMatch_out_6 = to_unsigned(16#03#, 8) ELSE
      Y_signed(4) WHEN delayMatch_out_6 = to_unsigned(16#04#, 8) ELSE
      Y_signed(5) WHEN delayMatch_out_6 = to_unsigned(16#05#, 8) ELSE
      Y_signed(6) WHEN delayMatch_out_6 = to_unsigned(16#06#, 8) ELSE
      Y_signed(7) WHEN delayMatch_out_6 = to_unsigned(16#07#, 8) ELSE
      Y_signed(8) WHEN delayMatch_out_6 = to_unsigned(16#08#, 8) ELSE
      Y_signed(9) WHEN delayMatch_out_6 = to_unsigned(16#09#, 8) ELSE
      Y_signed(10) WHEN delayMatch_out_6 = to_unsigned(16#0A#, 8) ELSE
      Y_signed(11) WHEN delayMatch_out_6 = to_unsigned(16#0B#, 8) ELSE
      Y_signed(12) WHEN delayMatch_out_6 = to_unsigned(16#0C#, 8) ELSE
      Y_signed(13) WHEN delayMatch_out_6 = to_unsigned(16#0D#, 8) ELSE
      Y_signed(14) WHEN delayMatch_out_6 = to_unsigned(16#0E#, 8) ELSE
      Y_signed(15) WHEN delayMatch_out_6 = to_unsigned(16#0F#, 8) ELSE
      Y_signed(16) WHEN delayMatch_out_6 = to_unsigned(16#10#, 8) ELSE
      Y_signed(17);

  Selector1_out1(0) <= Selector1_out1_0;
  Selector1_out1(1) <= Selector1_out1_1;
  Selector1_out1(2) <= Selector1_out1_2;
  Selector1_out1(3) <= Selector1_out1_3;
  Selector1_out1(4) <= Selector1_out1_4;
  Selector1_out1(5) <= Selector1_out1_5;


  Add_out1_gen: FOR t_01 IN 0 TO 5 GENERATE
    Add_out1(t_01) <= xcos_out1_2(t_01) + Selector1_out1(t_01);
  END GENERATE Add_out1_gen;


  outputgen: FOR k IN 0 TO 5 GENERATE
    Rho(k) <= std_logic_vector(Add_out1(k));
  END GENERATE;

END rtl;

