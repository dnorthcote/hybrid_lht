-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_600_Elhossini\hdlsrc\hybrid_lht\Hybrid_LHT_Kernel.vhd
-- Created: 2020-03-05 10:35:23
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Hybrid_LHT_Kernel
-- Source Path: hybrid_lht/Hybrid LHT/Hybrid LHT Kernel
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Hybrid_LHT_pkg.ALL;

ENTITY Hybrid_LHT_Kernel IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        s_axis_tvalid                     :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        s_axis_tuser                      :   IN    std_logic;
        s_axis_tlast                      :   IN    std_logic;
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tuser                      :   OUT   std_logic;
        m_axis_tlast                      :   OUT   std_logic;
        hough_param                       :   OUT   vector_of_std_logic_vector10(0 TO 5);  -- ufix10 [6]
        edge_rsvd                         :   OUT   std_logic;  -- ufix1
        shift                             :   OUT   vector_of_std_logic_vector6(0 TO 5)  -- ufix6 [6]
        );
END Hybrid_LHT_Kernel;


ARCHITECTURE rtl OF Hybrid_LHT_Kernel IS

  -- Component Declarations
  COMPONENT Extract_Active_Votes
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Theta                           :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Index                           :   OUT   vector_of_std_logic_vector8(0 TO 5)  -- uint8 [6]
          );
  END COMPONENT;

  COMPONENT Gradient_Kernel_System
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Edge_rsvd                       :   IN    std_logic;  -- ufix1
          X                               :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
          Y                               :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
          Theta                           :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          vEdge                           :   OUT   std_logic;  -- ufix1
          Rho                             :   OUT   vector_of_std_logic_vector10(0 TO 5);  -- ufix10 [6]
          Shift                           :   OUT   vector_of_std_logic_vector6(0 TO 5)  -- ufix6 [6]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Extract_Active_Votes
    USE ENTITY work.Extract_Active_Votes(rtl);

  FOR ALL : Gradient_Kernel_System
    USE ENTITY work.Gradient_Kernel_System(rtl);

  -- Signals
  SIGNAL s_axis_tdata_unsigned            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Theta_Slice_out1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Extract_Active_Votes_out1        : vector_of_std_logic_vector8(0 TO 5);  -- ufix8 [6]
  SIGNAL Extract_Active_Votes_out1_unsigned : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL Extract_Active_Votes_out1_1      : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL Extract_Active_Votes_out1_0      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Edge_Slice_out1                  : std_logic;  -- ufix1
  SIGNAL X_Counter_out1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Y_Counter_out1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL y                                : std_logic;  -- ufix1
  SIGNAL Gradient_Kernel_System_out2      : vector_of_std_logic_vector10(0 TO 5);  -- ufix10 [6]
  SIGNAL Gradient_Kernel_System_out3      : vector_of_std_logic_vector6(0 TO 5);  -- ufix6 [6]
  SIGNAL Gradient_Kernel_System_out2_unsigned : vector_of_unsigned10(0 TO 5);  -- ufix10 [6]
  SIGNAL Selector6_out1_0                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Extract_Active_Votes_out1_1_1    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector6_out1_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Extract_Active_Votes_out1_2      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector6_out1_2                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Extract_Active_Votes_out1_3      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector6_out1_3                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Extract_Active_Votes_out1_4      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector6_out1_4                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Extract_Active_Votes_out1_5      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector6_out1_5                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Selector6_out1                   : vector_of_unsigned10(0 TO 5);  -- ufix10 [6]
  SIGNAL Extract_Active_Votes_out1_0_1    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Gradient_Kernel_System_out3_unsigned : vector_of_unsigned6(0 TO 5);  -- ufix6 [6]
  SIGNAL Selector1_out1_0                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Extract_Active_Votes_out1_1_2    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector1_out1_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Extract_Active_Votes_out1_2_1    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector1_out1_2                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Extract_Active_Votes_out1_3_1    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector1_out1_3                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Extract_Active_Votes_out1_4_1    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector1_out1_4                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Extract_Active_Votes_out1_5_1    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Selector1_out1_5                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Selector1_out1                   : vector_of_unsigned6(0 TO 5);  -- ufix6 [6]

BEGIN
  u_Extract_Active_Votes : Extract_Active_Votes
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Theta => std_logic_vector(Theta_Slice_out1),  -- ufix5
              Index => Extract_Active_Votes_out1  -- uint8 [6]
              );

  u_Gradient_Kernel_System : Gradient_Kernel_System
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Edge_rsvd => Edge_Slice_out1,  -- ufix1
              X => std_logic_vector(X_Counter_out1),  -- sfix10
              Y => std_logic_vector(Y_Counter_out1),  -- sfix10
              Theta => std_logic_vector(Theta_Slice_out1),  -- ufix5
              vEdge => y,  -- ufix1
              Rho => Gradient_Kernel_System_out2,  -- ufix10 [6]
              Shift => Gradient_Kernel_System_out3  -- ufix6 [6]
              );

  s_axis_tdata_unsigned <= unsigned(s_axis_tdata);

  Theta_Slice_out1 <= s_axis_tdata_unsigned(4 DOWNTO 0);

  outputgen4: FOR k IN 0 TO 5 GENERATE
    Extract_Active_Votes_out1_unsigned(k) <= unsigned(Extract_Active_Votes_out1(k));
  END GENERATE;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Extract_Active_Votes_out1_1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Extract_Active_Votes_out1_1 <= Extract_Active_Votes_out1_unsigned;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Extract_Active_Votes_out1_0 <= Extract_Active_Votes_out1_1(0);

  AND_out1 <= s_axis_tvalid AND s_axis_tlast;

  Edge_Slice_out1 <= s_axis_tdata_unsigned(5);

  -- Count limited, Signed Counter
  --  initial value   = -400
  --  step value      = 1
  --  count to value  = 399
  X_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      X_Counter_out1 <= to_signed(-16#190#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF s_axis_tvalid = '1' THEN 
          IF X_Counter_out1 >= to_signed(16#18F#, 10) THEN 
            X_Counter_out1 <= to_signed(-16#190#, 10);
          ELSE 
            X_Counter_out1 <= X_Counter_out1 + to_signed(16#001#, 10);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS X_Counter_process;


  -- Count limited, Signed Counter
  --  initial value   = -300
  --  step value      = 1
  --  count to value  = 299
  Y_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Y_Counter_out1 <= to_signed(-16#12C#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF AND_out1 = '1' THEN 
          IF Y_Counter_out1 >= to_signed(16#12B#, 10) THEN 
            Y_Counter_out1 <= to_signed(-16#12C#, 10);
          ELSE 
            Y_Counter_out1 <= Y_Counter_out1 + to_signed(16#001#, 10);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS Y_Counter_process;


  outputgen3: FOR k IN 0 TO 5 GENERATE
    Gradient_Kernel_System_out2_unsigned(k) <= unsigned(Gradient_Kernel_System_out2(k));
  END GENERATE;

  
  Selector6_out1_0 <= Gradient_Kernel_System_out2_unsigned(0) WHEN Extract_Active_Votes_out1_0 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(1) WHEN Extract_Active_Votes_out1_0 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(2) WHEN Extract_Active_Votes_out1_0 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(3) WHEN Extract_Active_Votes_out1_0 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(4) WHEN Extract_Active_Votes_out1_0 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(5);

  Extract_Active_Votes_out1_1_1 <= Extract_Active_Votes_out1_1(1);

  
  Selector6_out1_1 <= Gradient_Kernel_System_out2_unsigned(0) WHEN Extract_Active_Votes_out1_1_1 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(1) WHEN Extract_Active_Votes_out1_1_1 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(2) WHEN Extract_Active_Votes_out1_1_1 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(3) WHEN Extract_Active_Votes_out1_1_1 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(4) WHEN Extract_Active_Votes_out1_1_1 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(5);

  Extract_Active_Votes_out1_2 <= Extract_Active_Votes_out1_1(2);

  
  Selector6_out1_2 <= Gradient_Kernel_System_out2_unsigned(0) WHEN Extract_Active_Votes_out1_2 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(1) WHEN Extract_Active_Votes_out1_2 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(2) WHEN Extract_Active_Votes_out1_2 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(3) WHEN Extract_Active_Votes_out1_2 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(4) WHEN Extract_Active_Votes_out1_2 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(5);

  Extract_Active_Votes_out1_3 <= Extract_Active_Votes_out1_1(3);

  
  Selector6_out1_3 <= Gradient_Kernel_System_out2_unsigned(0) WHEN Extract_Active_Votes_out1_3 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(1) WHEN Extract_Active_Votes_out1_3 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(2) WHEN Extract_Active_Votes_out1_3 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(3) WHEN Extract_Active_Votes_out1_3 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(4) WHEN Extract_Active_Votes_out1_3 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(5);

  Extract_Active_Votes_out1_4 <= Extract_Active_Votes_out1_1(4);

  
  Selector6_out1_4 <= Gradient_Kernel_System_out2_unsigned(0) WHEN Extract_Active_Votes_out1_4 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(1) WHEN Extract_Active_Votes_out1_4 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(2) WHEN Extract_Active_Votes_out1_4 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(3) WHEN Extract_Active_Votes_out1_4 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(4) WHEN Extract_Active_Votes_out1_4 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(5);

  Extract_Active_Votes_out1_5 <= Extract_Active_Votes_out1_1(5);

  
  Selector6_out1_5 <= Gradient_Kernel_System_out2_unsigned(0) WHEN Extract_Active_Votes_out1_5 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(1) WHEN Extract_Active_Votes_out1_5 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(2) WHEN Extract_Active_Votes_out1_5 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(3) WHEN Extract_Active_Votes_out1_5 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(4) WHEN Extract_Active_Votes_out1_5 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out2_unsigned(5);

  Selector6_out1(0) <= Selector6_out1_0;
  Selector6_out1(1) <= Selector6_out1_1;
  Selector6_out1(2) <= Selector6_out1_2;
  Selector6_out1(3) <= Selector6_out1_3;
  Selector6_out1(4) <= Selector6_out1_4;
  Selector6_out1(5) <= Selector6_out1_5;

  outputgen2: FOR k IN 0 TO 5 GENERATE
    hough_param(k) <= std_logic_vector(Selector6_out1(k));
  END GENERATE;

  Extract_Active_Votes_out1_0_1 <= unsigned(Extract_Active_Votes_out1(0));

  outputgen1: FOR k IN 0 TO 5 GENERATE
    Gradient_Kernel_System_out3_unsigned(k) <= unsigned(Gradient_Kernel_System_out3(k));
  END GENERATE;

  
  Selector1_out1_0 <= Gradient_Kernel_System_out3_unsigned(0) WHEN Extract_Active_Votes_out1_0_1 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(1) WHEN Extract_Active_Votes_out1_0_1 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(2) WHEN Extract_Active_Votes_out1_0_1 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(3) WHEN Extract_Active_Votes_out1_0_1 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(4) WHEN Extract_Active_Votes_out1_0_1 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(5);

  Extract_Active_Votes_out1_1_2 <= unsigned(Extract_Active_Votes_out1(1));

  
  Selector1_out1_1 <= Gradient_Kernel_System_out3_unsigned(0) WHEN Extract_Active_Votes_out1_1_2 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(1) WHEN Extract_Active_Votes_out1_1_2 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(2) WHEN Extract_Active_Votes_out1_1_2 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(3) WHEN Extract_Active_Votes_out1_1_2 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(4) WHEN Extract_Active_Votes_out1_1_2 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(5);

  Extract_Active_Votes_out1_2_1 <= unsigned(Extract_Active_Votes_out1(2));

  
  Selector1_out1_2 <= Gradient_Kernel_System_out3_unsigned(0) WHEN Extract_Active_Votes_out1_2_1 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(1) WHEN Extract_Active_Votes_out1_2_1 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(2) WHEN Extract_Active_Votes_out1_2_1 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(3) WHEN Extract_Active_Votes_out1_2_1 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(4) WHEN Extract_Active_Votes_out1_2_1 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(5);

  Extract_Active_Votes_out1_3_1 <= unsigned(Extract_Active_Votes_out1(3));

  
  Selector1_out1_3 <= Gradient_Kernel_System_out3_unsigned(0) WHEN Extract_Active_Votes_out1_3_1 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(1) WHEN Extract_Active_Votes_out1_3_1 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(2) WHEN Extract_Active_Votes_out1_3_1 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(3) WHEN Extract_Active_Votes_out1_3_1 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(4) WHEN Extract_Active_Votes_out1_3_1 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(5);

  Extract_Active_Votes_out1_4_1 <= unsigned(Extract_Active_Votes_out1(4));

  
  Selector1_out1_4 <= Gradient_Kernel_System_out3_unsigned(0) WHEN Extract_Active_Votes_out1_4_1 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(1) WHEN Extract_Active_Votes_out1_4_1 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(2) WHEN Extract_Active_Votes_out1_4_1 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(3) WHEN Extract_Active_Votes_out1_4_1 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(4) WHEN Extract_Active_Votes_out1_4_1 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(5);

  Extract_Active_Votes_out1_5_1 <= unsigned(Extract_Active_Votes_out1(5));

  
  Selector1_out1_5 <= Gradient_Kernel_System_out3_unsigned(0) WHEN Extract_Active_Votes_out1_5_1 = to_unsigned(16#00#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(1) WHEN Extract_Active_Votes_out1_5_1 = to_unsigned(16#01#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(2) WHEN Extract_Active_Votes_out1_5_1 = to_unsigned(16#02#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(3) WHEN Extract_Active_Votes_out1_5_1 = to_unsigned(16#03#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(4) WHEN Extract_Active_Votes_out1_5_1 = to_unsigned(16#04#, 8) ELSE
      Gradient_Kernel_System_out3_unsigned(5);

  Selector1_out1(0) <= Selector1_out1_0;
  Selector1_out1(1) <= Selector1_out1_1;
  Selector1_out1(2) <= Selector1_out1_2;
  Selector1_out1(3) <= Selector1_out1_3;
  Selector1_out1(4) <= Selector1_out1_4;
  Selector1_out1(5) <= Selector1_out1_5;

  outputgen: FOR k IN 0 TO 5 GENERATE
    shift(k) <= std_logic_vector(Selector1_out1(k));
  END GENERATE;

  m_axis_tvalid <= s_axis_tvalid;

  m_axis_tuser <= s_axis_tuser;

  m_axis_tlast <= s_axis_tlast;

  edge_rsvd <= y;

END rtl;

