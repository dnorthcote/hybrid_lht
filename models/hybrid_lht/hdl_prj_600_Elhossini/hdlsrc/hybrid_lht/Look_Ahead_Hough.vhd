-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_600_Elhossini\hdlsrc\hybrid_lht\Look_Ahead_Hough.vhd
-- Created: 2020-03-05 10:35:23
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Look_Ahead_Hough
-- Source Path: hybrid_lht/Hybrid LHT/Hybrid LHT Kernel/Gradient Kernel System/Hough Kernel/Look Ahead Hough/Look 
-- Ahead Houg
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Hybrid_LHT_pkg.ALL;

ENTITY Look_Ahead_Hough IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Y                                 :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
        eol                               :   IN    std_logic;
        ysin                              :   OUT   vector_of_std_logic_vector10(0 TO 17)  -- sfix10 [18]
        );
END Look_Ahead_Hough;


ARCHITECTURE rtl OF Look_Ahead_Hough IS

  -- Component Declarations
  COMPONENT MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          eol                             :   IN    std_logic;
          ntheta                          :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          index                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          sel                             :   OUT   std_logic;
          write                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Register_Bank
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Data_In                         :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
          Write_Enable                    :   IN    std_logic;
          Data_Out                        :   OUT   std_logic_vector(9 DOWNTO 0)  -- sfix10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : MATLAB_Function
    USE ENTITY work.MATLAB_Function(rtl);

  FOR ALL : Register_Bank
    USE ENTITY work.Register_Bank(rtl);

  -- Signals
  SIGNAL Y_signed                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL Constant_out1                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL index                            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL sel                              : std_logic;
  SIGNAL write                            : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL sel_1                            : std_logic;
  SIGNAL index_unsigned                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL SineROM_out1                     : vector_of_signed16(0 TO 17);  -- sfix16_En14 [18]
  SIGNAL Selector1_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Selector1_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant1_out1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Add_out1                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Add_out1_1                       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL multiply_out1                    : signed(25 DOWNTO 0);  -- sfix26_En14
  SIGNAL multiply_out1_1                  : signed(25 DOWNTO 0);  -- sfix26_En14
  SIGNAL multiply_out1_2                  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL theta_index_out1                 : vector_of_unsigned8(0 TO 17);  -- uint8 [18]
  SIGNAL theta_index_out1_0               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL theta_index_out1_1               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop2       : std_logic;
  SIGNAL theta_index_out1_2               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop3       : std_logic;
  SIGNAL theta_index_out1_3               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop4       : std_logic;
  SIGNAL theta_index_out1_4               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop5       : std_logic;
  SIGNAL theta_index_out1_5               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop6       : std_logic;
  SIGNAL theta_index_out1_6               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop7       : std_logic;
  SIGNAL theta_index_out1_7               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop8       : std_logic;
  SIGNAL theta_index_out1_8               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop9       : std_logic;
  SIGNAL theta_index_out1_9               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop10      : std_logic;
  SIGNAL theta_index_out1_10              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop11      : std_logic;
  SIGNAL theta_index_out1_11              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop12      : std_logic;
  SIGNAL theta_index_out1_12              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop13      : std_logic;
  SIGNAL theta_index_out1_13              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop14      : std_logic;
  SIGNAL theta_index_out1_14              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop15      : std_logic;
  SIGNAL theta_index_out1_15              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop16      : std_logic;
  SIGNAL theta_index_out1_16              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop17      : std_logic;
  SIGNAL theta_index_out1_17              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop18      : std_logic;
  SIGNAL Relational_Operator_out1         : std_logic_vector(0 TO 17);  -- boolean [18]
  SIGNAL Relational_Operator_out1_0       : std_logic;
  SIGNAL write_1                          : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_0                   : std_logic;
  SIGNAL Relational_Operator_out1_1       : std_logic;
  SIGNAL write_2                          : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_1                   : std_logic;
  SIGNAL Relational_Operator_out1_2       : std_logic;
  SIGNAL write_3                          : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_2                   : std_logic;
  SIGNAL Relational_Operator_out1_3       : std_logic;
  SIGNAL write_4                          : std_logic;
  SIGNAL delayMatch5_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_3                   : std_logic;
  SIGNAL Relational_Operator_out1_4       : std_logic;
  SIGNAL write_5                          : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_4                   : std_logic;
  SIGNAL Relational_Operator_out1_5       : std_logic;
  SIGNAL write_6                          : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_5                   : std_logic;
  SIGNAL Relational_Operator_out1_6       : std_logic;
  SIGNAL write_7                          : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_6                   : std_logic;
  SIGNAL Relational_Operator_out1_7       : std_logic;
  SIGNAL write_8                          : std_logic;
  SIGNAL delayMatch9_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_7                   : std_logic;
  SIGNAL Relational_Operator_out1_8       : std_logic;
  SIGNAL write_9                          : std_logic;
  SIGNAL delayMatch10_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_8                   : std_logic;
  SIGNAL Relational_Operator_out1_9       : std_logic;
  SIGNAL write_10                         : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_9                   : std_logic;
  SIGNAL Relational_Operator_out1_10      : std_logic;
  SIGNAL write_11                         : std_logic;
  SIGNAL delayMatch12_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_10                  : std_logic;
  SIGNAL Relational_Operator_out1_11      : std_logic;
  SIGNAL write_12                         : std_logic;
  SIGNAL delayMatch13_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_11                  : std_logic;
  SIGNAL Relational_Operator_out1_12      : std_logic;
  SIGNAL write_13                         : std_logic;
  SIGNAL delayMatch14_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_12                  : std_logic;
  SIGNAL Relational_Operator_out1_13      : std_logic;
  SIGNAL write_14                         : std_logic;
  SIGNAL delayMatch15_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_13                  : std_logic;
  SIGNAL Relational_Operator_out1_14      : std_logic;
  SIGNAL write_15                         : std_logic;
  SIGNAL delayMatch16_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_14                  : std_logic;
  SIGNAL Relational_Operator_out1_15      : std_logic;
  SIGNAL write_16                         : std_logic;
  SIGNAL delayMatch17_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_15                  : std_logic;
  SIGNAL Relational_Operator_out1_16      : std_logic;
  SIGNAL write_17                         : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_16                  : std_logic;
  SIGNAL Relational_Operator_out1_17      : std_logic;
  SIGNAL write_18                         : std_logic;
  SIGNAL delayMatch19_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Write_Enable_17                  : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_0 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_1 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_2 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_3 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_4 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_5 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_6 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_7 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_8 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_9 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_10 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_11 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_12 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_13 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_14 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_15 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_16 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_17 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Register_Bank_out1               : vector_of_signed10(0 TO 17);  -- sfix10 [18]
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : vector_of_signed10(0 TO 17);  -- sfix10 [18]
  SIGNAL Unit_Delay_Enabled_Synchronous_ectrl : vector_of_signed10(0 TO 17);  -- sfix10 [18]
  SIGNAL row_0_out1                       : vector_of_signed10(0 TO 17);  -- sfix10 [18]
  SIGNAL Multiport_Switch_out1            : vector_of_signed10(0 TO 17);  -- sfix10 [18]

BEGIN
  u_MATLAB_Function : MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              eol => eol,
              ntheta => std_logic_vector(Constant_out1),  -- ufix5
              index => index,  -- uint16
              sel => sel,
              write => write
              );

  u_Register_Bank_instance1 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_0,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_0  -- sfix10
              );

  u_Register_Bank_instance2 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_1,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_1  -- sfix10
              );

  u_Register_Bank_instance3 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_2,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_2  -- sfix10
              );

  u_Register_Bank_instance4 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_3,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_3  -- sfix10
              );

  u_Register_Bank_instance5 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_4,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_4  -- sfix10
              );

  u_Register_Bank_instance6 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_5,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_5  -- sfix10
              );

  u_Register_Bank_instance7 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_6,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_6  -- sfix10
              );

  u_Register_Bank_instance8 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_7,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_7  -- sfix10
              );

  u_Register_Bank_instance9 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_8,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_8  -- sfix10
              );

  u_Register_Bank_instance10 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_9,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_9  -- sfix10
              );

  u_Register_Bank_instance11 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_10,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_10  -- sfix10
              );

  u_Register_Bank_instance12 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_11,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_11  -- sfix10
              );

  u_Register_Bank_instance13 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_12,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_12  -- sfix10
              );

  u_Register_Bank_instance14 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_13,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_13  -- sfix10
              );

  u_Register_Bank_instance15 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_14,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_14  -- sfix10
              );

  u_Register_Bank_instance16 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_15,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_15  -- sfix10
              );

  u_Register_Bank_instance17 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_16,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_16  -- sfix10
              );

  u_Register_Bank_instance18 : Register_Bank
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => std_logic_vector(multiply_out1_2),  -- sfix10
              Write_Enable => Write_Enable_17,
              Data_Out => Unit_Delay_Enabled_Synchronous_out1_17  -- sfix10
              );

  Y_signed <= signed(Y);

  
  Compare_To_Constant_out1 <= '1' WHEN Y_signed = to_signed(-16#12C#, 10) ELSE
      '0';

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= Compare_To_Constant_out1;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Compare_To_Constant_out1_1 <= delayMatch_reg(1);

  Constant_out1 <= to_unsigned(16#11#, 5);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= sel;
        delayMatch1_reg(1) <= delayMatch1_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  sel_1 <= delayMatch1_reg(1);

  index_unsigned <= unsigned(index);

  SineROM_out1(0) <= to_signed(16#0000#, 16);
  SineROM_out1(1) <= to_signed(16#0B1D#, 16);
  SineROM_out1(2) <= to_signed(16#15E4#, 16);
  SineROM_out1(3) <= to_signed(16#2000#, 16);
  SineROM_out1(4) <= to_signed(16#2923#, 16);
  SineROM_out1(5) <= to_signed(16#3107#, 16);
  SineROM_out1(6) <= to_signed(16#376D#, 16);
  SineROM_out1(7) <= to_signed(16#3C24#, 16);
  SineROM_out1(8) <= to_signed(16#3F07#, 16);
  SineROM_out1(9) <= to_signed(16#4000#, 16);
  SineROM_out1(10) <= to_signed(16#3F07#, 16);
  SineROM_out1(11) <= to_signed(16#3C24#, 16);
  SineROM_out1(12) <= to_signed(16#376D#, 16);
  SineROM_out1(13) <= to_signed(16#3107#, 16);
  SineROM_out1(14) <= to_signed(16#2923#, 16);
  SineROM_out1(15) <= to_signed(16#2000#, 16);
  SineROM_out1(16) <= to_signed(16#15E4#, 16);
  SineROM_out1(17) <= to_signed(16#0B1D#, 16);

  
  Selector1_out1 <= SineROM_out1(0) WHEN index_unsigned = to_unsigned(16#0000#, 16) ELSE
      SineROM_out1(1) WHEN index_unsigned = to_unsigned(16#0001#, 16) ELSE
      SineROM_out1(2) WHEN index_unsigned = to_unsigned(16#0002#, 16) ELSE
      SineROM_out1(3) WHEN index_unsigned = to_unsigned(16#0003#, 16) ELSE
      SineROM_out1(4) WHEN index_unsigned = to_unsigned(16#0004#, 16) ELSE
      SineROM_out1(5) WHEN index_unsigned = to_unsigned(16#0005#, 16) ELSE
      SineROM_out1(6) WHEN index_unsigned = to_unsigned(16#0006#, 16) ELSE
      SineROM_out1(7) WHEN index_unsigned = to_unsigned(16#0007#, 16) ELSE
      SineROM_out1(8) WHEN index_unsigned = to_unsigned(16#0008#, 16) ELSE
      SineROM_out1(9) WHEN index_unsigned = to_unsigned(16#0009#, 16) ELSE
      SineROM_out1(10) WHEN index_unsigned = to_unsigned(16#000A#, 16) ELSE
      SineROM_out1(11) WHEN index_unsigned = to_unsigned(16#000B#, 16) ELSE
      SineROM_out1(12) WHEN index_unsigned = to_unsigned(16#000C#, 16) ELSE
      SineROM_out1(13) WHEN index_unsigned = to_unsigned(16#000D#, 16) ELSE
      SineROM_out1(14) WHEN index_unsigned = to_unsigned(16#000E#, 16) ELSE
      SineROM_out1(15) WHEN index_unsigned = to_unsigned(16#000F#, 16) ELSE
      SineROM_out1(16) WHEN index_unsigned = to_unsigned(16#0010#, 16) ELSE
      SineROM_out1(17);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Selector1_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Selector1_out1_1 <= Selector1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Constant1_out1 <= to_signed(16#001#, 10);

  Add_out1 <= Constant1_out1 + Y_signed;

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Add_out1_1 <= to_signed(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Add_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  multiply_out1 <= Selector1_out1_1 * Add_out1_1;

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      multiply_out1_1 <= to_signed(16#0000000#, 26);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        multiply_out1_1 <= multiply_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  multiply_out1_2 <= multiply_out1_1(23 DOWNTO 14) + ('0' & (multiply_out1_1(13) AND (( NOT multiply_out1_1(25)) OR (multiply_out1_1(12) OR multiply_out1_1(11) OR multiply_out1_1(10) OR multiply_out1_1(9) OR multiply_out1_1(8) OR multiply_out1_1(7) OR multiply_out1_1(6) OR multiply_out1_1(5) OR multiply_out1_1(4) OR multiply_out1_1(3) OR multiply_out1_1(2) OR multiply_out1_1(1) OR multiply_out1_1(0)))));

  theta_index_out1(0) <= to_unsigned(16#00#, 8);
  theta_index_out1(1) <= to_unsigned(16#01#, 8);
  theta_index_out1(2) <= to_unsigned(16#02#, 8);
  theta_index_out1(3) <= to_unsigned(16#03#, 8);
  theta_index_out1(4) <= to_unsigned(16#04#, 8);
  theta_index_out1(5) <= to_unsigned(16#05#, 8);
  theta_index_out1(6) <= to_unsigned(16#06#, 8);
  theta_index_out1(7) <= to_unsigned(16#07#, 8);
  theta_index_out1(8) <= to_unsigned(16#08#, 8);
  theta_index_out1(9) <= to_unsigned(16#09#, 8);
  theta_index_out1(10) <= to_unsigned(16#0A#, 8);
  theta_index_out1(11) <= to_unsigned(16#0B#, 8);
  theta_index_out1(12) <= to_unsigned(16#0C#, 8);
  theta_index_out1(13) <= to_unsigned(16#0D#, 8);
  theta_index_out1(14) <= to_unsigned(16#0E#, 8);
  theta_index_out1(15) <= to_unsigned(16#0F#, 8);
  theta_index_out1(16) <= to_unsigned(16#10#, 8);
  theta_index_out1(17) <= to_unsigned(16#11#, 8);

  theta_index_out1_0 <= theta_index_out1(0);

  
  Relational_Operator_relop1 <= '1' WHEN index_unsigned = resize(theta_index_out1_0, 16) ELSE
      '0';

  theta_index_out1_1 <= theta_index_out1(1);

  
  Relational_Operator_relop2 <= '1' WHEN index_unsigned = resize(theta_index_out1_1, 16) ELSE
      '0';

  theta_index_out1_2 <= theta_index_out1(2);

  
  Relational_Operator_relop3 <= '1' WHEN index_unsigned = resize(theta_index_out1_2, 16) ELSE
      '0';

  theta_index_out1_3 <= theta_index_out1(3);

  
  Relational_Operator_relop4 <= '1' WHEN index_unsigned = resize(theta_index_out1_3, 16) ELSE
      '0';

  theta_index_out1_4 <= theta_index_out1(4);

  
  Relational_Operator_relop5 <= '1' WHEN index_unsigned = resize(theta_index_out1_4, 16) ELSE
      '0';

  theta_index_out1_5 <= theta_index_out1(5);

  
  Relational_Operator_relop6 <= '1' WHEN index_unsigned = resize(theta_index_out1_5, 16) ELSE
      '0';

  theta_index_out1_6 <= theta_index_out1(6);

  
  Relational_Operator_relop7 <= '1' WHEN index_unsigned = resize(theta_index_out1_6, 16) ELSE
      '0';

  theta_index_out1_7 <= theta_index_out1(7);

  
  Relational_Operator_relop8 <= '1' WHEN index_unsigned = resize(theta_index_out1_7, 16) ELSE
      '0';

  theta_index_out1_8 <= theta_index_out1(8);

  
  Relational_Operator_relop9 <= '1' WHEN index_unsigned = resize(theta_index_out1_8, 16) ELSE
      '0';

  theta_index_out1_9 <= theta_index_out1(9);

  
  Relational_Operator_relop10 <= '1' WHEN index_unsigned = resize(theta_index_out1_9, 16) ELSE
      '0';

  theta_index_out1_10 <= theta_index_out1(10);

  
  Relational_Operator_relop11 <= '1' WHEN index_unsigned = resize(theta_index_out1_10, 16) ELSE
      '0';

  theta_index_out1_11 <= theta_index_out1(11);

  
  Relational_Operator_relop12 <= '1' WHEN index_unsigned = resize(theta_index_out1_11, 16) ELSE
      '0';

  theta_index_out1_12 <= theta_index_out1(12);

  
  Relational_Operator_relop13 <= '1' WHEN index_unsigned = resize(theta_index_out1_12, 16) ELSE
      '0';

  theta_index_out1_13 <= theta_index_out1(13);

  
  Relational_Operator_relop14 <= '1' WHEN index_unsigned = resize(theta_index_out1_13, 16) ELSE
      '0';

  theta_index_out1_14 <= theta_index_out1(14);

  
  Relational_Operator_relop15 <= '1' WHEN index_unsigned = resize(theta_index_out1_14, 16) ELSE
      '0';

  theta_index_out1_15 <= theta_index_out1(15);

  
  Relational_Operator_relop16 <= '1' WHEN index_unsigned = resize(theta_index_out1_15, 16) ELSE
      '0';

  theta_index_out1_16 <= theta_index_out1(16);

  
  Relational_Operator_relop17 <= '1' WHEN index_unsigned = resize(theta_index_out1_16, 16) ELSE
      '0';

  theta_index_out1_17 <= theta_index_out1(17);

  
  Relational_Operator_relop18 <= '1' WHEN index_unsigned = resize(theta_index_out1_17, 16) ELSE
      '0';

  Relational_Operator_out1(0) <= Relational_Operator_relop1;
  Relational_Operator_out1(1) <= Relational_Operator_relop2;
  Relational_Operator_out1(2) <= Relational_Operator_relop3;
  Relational_Operator_out1(3) <= Relational_Operator_relop4;
  Relational_Operator_out1(4) <= Relational_Operator_relop5;
  Relational_Operator_out1(5) <= Relational_Operator_relop6;
  Relational_Operator_out1(6) <= Relational_Operator_relop7;
  Relational_Operator_out1(7) <= Relational_Operator_relop8;
  Relational_Operator_out1(8) <= Relational_Operator_relop9;
  Relational_Operator_out1(9) <= Relational_Operator_relop10;
  Relational_Operator_out1(10) <= Relational_Operator_relop11;
  Relational_Operator_out1(11) <= Relational_Operator_relop12;
  Relational_Operator_out1(12) <= Relational_Operator_relop13;
  Relational_Operator_out1(13) <= Relational_Operator_relop14;
  Relational_Operator_out1(14) <= Relational_Operator_relop15;
  Relational_Operator_out1(15) <= Relational_Operator_relop16;
  Relational_Operator_out1(16) <= Relational_Operator_relop17;
  Relational_Operator_out1(17) <= Relational_Operator_relop18;

  Relational_Operator_out1_0 <= Relational_Operator_out1(0);

  write_1 <= write AND Relational_Operator_out1_0;

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= write_1;
        delayMatch2_reg(1) <= delayMatch2_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Write_Enable_0 <= delayMatch2_reg(1);

  Relational_Operator_out1_1 <= Relational_Operator_out1(1);

  write_2 <= write AND Relational_Operator_out1_1;

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch3_reg(0) <= write_2;
        delayMatch3_reg(1) <= delayMatch3_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Write_Enable_1 <= delayMatch3_reg(1);

  Relational_Operator_out1_2 <= Relational_Operator_out1(2);

  write_3 <= write AND Relational_Operator_out1_2;

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch4_reg(0) <= write_3;
        delayMatch4_reg(1) <= delayMatch4_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Write_Enable_2 <= delayMatch4_reg(1);

  Relational_Operator_out1_3 <= Relational_Operator_out1(3);

  write_4 <= write AND Relational_Operator_out1_3;

  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch5_reg(0) <= write_4;
        delayMatch5_reg(1) <= delayMatch5_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  Write_Enable_3 <= delayMatch5_reg(1);

  Relational_Operator_out1_4 <= Relational_Operator_out1(4);

  write_5 <= write AND Relational_Operator_out1_4;

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch6_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch6_reg(0) <= write_5;
        delayMatch6_reg(1) <= delayMatch6_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  Write_Enable_4 <= delayMatch6_reg(1);

  Relational_Operator_out1_5 <= Relational_Operator_out1(5);

  write_6 <= write AND Relational_Operator_out1_5;

  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch7_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch7_reg(0) <= write_6;
        delayMatch7_reg(1) <= delayMatch7_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Write_Enable_5 <= delayMatch7_reg(1);

  Relational_Operator_out1_6 <= Relational_Operator_out1(6);

  write_7 <= write AND Relational_Operator_out1_6;

  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch8_reg(0) <= write_7;
        delayMatch8_reg(1) <= delayMatch8_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  Write_Enable_6 <= delayMatch8_reg(1);

  Relational_Operator_out1_7 <= Relational_Operator_out1(7);

  write_8 <= write AND Relational_Operator_out1_7;

  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch9_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch9_reg(0) <= write_8;
        delayMatch9_reg(1) <= delayMatch9_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Write_Enable_7 <= delayMatch9_reg(1);

  Relational_Operator_out1_8 <= Relational_Operator_out1(8);

  write_9 <= write AND Relational_Operator_out1_8;

  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch10_reg(0) <= write_9;
        delayMatch10_reg(1) <= delayMatch10_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Write_Enable_8 <= delayMatch10_reg(1);

  Relational_Operator_out1_9 <= Relational_Operator_out1(9);

  write_10 <= write AND Relational_Operator_out1_9;

  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch11_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch11_reg(0) <= write_10;
        delayMatch11_reg(1) <= delayMatch11_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Write_Enable_9 <= delayMatch11_reg(1);

  Relational_Operator_out1_10 <= Relational_Operator_out1(10);

  write_11 <= write AND Relational_Operator_out1_10;

  delayMatch12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch12_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch12_reg(0) <= write_11;
        delayMatch12_reg(1) <= delayMatch12_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  Write_Enable_10 <= delayMatch12_reg(1);

  Relational_Operator_out1_11 <= Relational_Operator_out1(11);

  write_12 <= write AND Relational_Operator_out1_11;

  delayMatch13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch13_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch13_reg(0) <= write_12;
        delayMatch13_reg(1) <= delayMatch13_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  Write_Enable_11 <= delayMatch13_reg(1);

  Relational_Operator_out1_12 <= Relational_Operator_out1(12);

  write_13 <= write AND Relational_Operator_out1_12;

  delayMatch14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch14_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch14_reg(0) <= write_13;
        delayMatch14_reg(1) <= delayMatch14_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  Write_Enable_12 <= delayMatch14_reg(1);

  Relational_Operator_out1_13 <= Relational_Operator_out1(13);

  write_14 <= write AND Relational_Operator_out1_13;

  delayMatch15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch15_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch15_reg(0) <= write_14;
        delayMatch15_reg(1) <= delayMatch15_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  Write_Enable_13 <= delayMatch15_reg(1);

  Relational_Operator_out1_14 <= Relational_Operator_out1(14);

  write_15 <= write AND Relational_Operator_out1_14;

  delayMatch16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch16_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch16_reg(0) <= write_15;
        delayMatch16_reg(1) <= delayMatch16_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  Write_Enable_14 <= delayMatch16_reg(1);

  Relational_Operator_out1_15 <= Relational_Operator_out1(15);

  write_16 <= write AND Relational_Operator_out1_15;

  delayMatch17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch17_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch17_reg(0) <= write_16;
        delayMatch17_reg(1) <= delayMatch17_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  Write_Enable_15 <= delayMatch17_reg(1);

  Relational_Operator_out1_16 <= Relational_Operator_out1(16);

  write_17 <= write AND Relational_Operator_out1_16;

  delayMatch18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch18_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch18_reg(0) <= write_17;
        delayMatch18_reg(1) <= delayMatch18_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  Write_Enable_16 <= delayMatch18_reg(1);

  Relational_Operator_out1_17 <= Relational_Operator_out1(17);

  write_18 <= write AND Relational_Operator_out1_17;

  delayMatch19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch19_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch19_reg(0) <= write_18;
        delayMatch19_reg(1) <= delayMatch19_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch19_process;

  Write_Enable_17 <= delayMatch19_reg(1);

  Register_Bank_out1(0) <= signed(Unit_Delay_Enabled_Synchronous_out1_0);
  Register_Bank_out1(1) <= signed(Unit_Delay_Enabled_Synchronous_out1_1);
  Register_Bank_out1(2) <= signed(Unit_Delay_Enabled_Synchronous_out1_2);
  Register_Bank_out1(3) <= signed(Unit_Delay_Enabled_Synchronous_out1_3);
  Register_Bank_out1(4) <= signed(Unit_Delay_Enabled_Synchronous_out1_4);
  Register_Bank_out1(5) <= signed(Unit_Delay_Enabled_Synchronous_out1_5);
  Register_Bank_out1(6) <= signed(Unit_Delay_Enabled_Synchronous_out1_6);
  Register_Bank_out1(7) <= signed(Unit_Delay_Enabled_Synchronous_out1_7);
  Register_Bank_out1(8) <= signed(Unit_Delay_Enabled_Synchronous_out1_8);
  Register_Bank_out1(9) <= signed(Unit_Delay_Enabled_Synchronous_out1_9);
  Register_Bank_out1(10) <= signed(Unit_Delay_Enabled_Synchronous_out1_10);
  Register_Bank_out1(11) <= signed(Unit_Delay_Enabled_Synchronous_out1_11);
  Register_Bank_out1(12) <= signed(Unit_Delay_Enabled_Synchronous_out1_12);
  Register_Bank_out1(13) <= signed(Unit_Delay_Enabled_Synchronous_out1_13);
  Register_Bank_out1(14) <= signed(Unit_Delay_Enabled_Synchronous_out1_14);
  Register_Bank_out1(15) <= signed(Unit_Delay_Enabled_Synchronous_out1_15);
  Register_Bank_out1(16) <= signed(Unit_Delay_Enabled_Synchronous_out1_16);
  Register_Bank_out1(17) <= signed(Unit_Delay_Enabled_Synchronous_out1_17);

  
  Unit_Delay_Enabled_Synchronous_ectrl <= Unit_Delay_Enabled_Synchronous_out1 WHEN sel_1 = '0' ELSE
      Register_Bank_out1;

  Unit_Delay_Enabled_Synchronous_lowered_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous_out1 <= (OTHERS => to_signed(16#000#, 10));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_lowered_process;


  row_0_out1(0) <= to_signed(16#000#, 10);
  row_0_out1(1) <= to_signed(-16#034#, 10);
  row_0_out1(2) <= to_signed(-16#067#, 10);
  row_0_out1(3) <= to_signed(-16#096#, 10);
  row_0_out1(4) <= to_signed(-16#0C1#, 10);
  row_0_out1(5) <= to_signed(-16#0E6#, 10);
  row_0_out1(6) <= to_signed(-16#104#, 10);
  row_0_out1(7) <= to_signed(-16#11A#, 10);
  row_0_out1(8) <= to_signed(-16#127#, 10);
  row_0_out1(9) <= to_signed(-16#12C#, 10);
  row_0_out1(10) <= to_signed(-16#127#, 10);
  row_0_out1(11) <= to_signed(-16#11A#, 10);
  row_0_out1(12) <= to_signed(-16#104#, 10);
  row_0_out1(13) <= to_signed(-16#0E6#, 10);
  row_0_out1(14) <= to_signed(-16#0C1#, 10);
  row_0_out1(15) <= to_signed(-16#096#, 10);
  row_0_out1(16) <= to_signed(-16#067#, 10);
  row_0_out1(17) <= to_signed(-16#034#, 10);

  
  Multiport_Switch_out1 <= Unit_Delay_Enabled_Synchronous_out1 WHEN Compare_To_Constant_out1_1 = '0' ELSE
      row_0_out1;

  outputgen: FOR k IN 0 TO 17 GENERATE
    ysin(k) <= std_logic_vector(Multiport_Switch_out1(k));
  END GENERATE;

END rtl;

