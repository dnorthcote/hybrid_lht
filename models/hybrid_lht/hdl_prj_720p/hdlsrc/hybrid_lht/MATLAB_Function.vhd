-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_720p\hdlsrc\hybrid_lht\MATLAB_Function.vhd
-- Created: 2020-03-05 09:20:25
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: MATLAB_Function
-- Source Path: hybrid_lht/Hybrid LHT/Hybrid LHT Kernel/Gradient Kernel System/Hough Kernel/Look Ahead Hough/Look 
-- Ahead Hough Symmetric/MATLAB Functio
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY MATLAB_Function IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        eol                               :   IN    std_logic;
        ntheta                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        index                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        sel                               :   OUT   std_logic;
        write                             :   OUT   std_logic
        );
END MATLAB_Function;


ARCHITECTURE rtl OF MATLAB_Function IS

  -- Signals
  SIGNAL ntheta_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL index_tmp                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL debug_state                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL state                            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL thetacounter                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL state_next                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL thetacounter_next                : unsigned(15 DOWNTO 0);  -- ufix16

BEGIN
  ntheta_unsigned <= unsigned(ntheta);

  MATLAB_Function_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      state <= to_unsigned(16#1#, 3);
      thetacounter <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        state <= state_next;
        thetacounter <= thetacounter_next;
      END IF;
    END IF;
  END PROCESS MATLAB_Function_1_process;

  MATLAB_Function_1_output : PROCESS (eol, ntheta_unsigned, state, thetacounter)
    VARIABLE add_temp : unsigned(16 DOWNTO 0);
  BEGIN
    state_next <= state;
    CASE state IS
      WHEN "001" =>
        sel <= '0';
        write <= '1';
        index_tmp <= thetacounter;
        debug_state <= state;
        IF thetacounter = resize(ntheta_unsigned, 16) THEN 
          thetacounter_next <= to_unsigned(16#0000#, 16);
          state_next <= to_unsigned(16#2#, 3);
        ELSE 
          add_temp := resize(thetacounter, 17) + to_unsigned(16#00001#, 17);
          IF add_temp(16) /= '0' THEN 
            thetacounter_next <= X"FFFF";
          ELSE 
            thetacounter_next <= add_temp(15 DOWNTO 0);
          END IF;
          state_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "010" =>
        write <= '0';
        index_tmp <= thetacounter;
        debug_state <= state;
        thetacounter_next <= to_unsigned(16#0000#, 16);
        IF eol = '1' THEN 
          sel <= '1';
          state_next <= to_unsigned(16#1#, 3);
        ELSE 
          sel <= '0';
          state_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN OTHERS => 
        thetacounter_next <= to_unsigned(16#0000#, 16);
        sel <= '0';
        write <= '0';
        index_tmp <= to_unsigned(16#0000#, 16);
        debug_state <= state;
        state_next <= to_unsigned(16#2#, 3);
    END CASE;
  END PROCESS MATLAB_Function_1_output;


  index <= std_logic_vector(index_tmp);

END rtl;

