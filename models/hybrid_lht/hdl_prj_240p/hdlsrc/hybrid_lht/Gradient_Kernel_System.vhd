-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_240p\hdlsrc\hybrid_lht\Gradient_Kernel_System.vhd
-- Created: 2020-03-05 11:51:28
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Gradient_Kernel_System
-- Source Path: hybrid_lht/Hybrid LHT/Hybrid LHT Kernel/Gradient Kernel System
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Hybrid_LHT_pkg.ALL;

ENTITY Gradient_Kernel_System IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Edge_rsvd                         :   IN    std_logic;  -- ufix1
        X                                 :   IN    std_logic_vector(8 DOWNTO 0);  -- sfix9
        Y                                 :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        Theta                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        vEdge                             :   OUT   std_logic;  -- ufix1
        Rho                               :   OUT   vector_of_std_logic_vector9(0 TO 44);  -- ufix9 [45]
        Shift                             :   OUT   vector_of_std_logic_vector6(0 TO 44)  -- ufix6 [45]
        );
END Gradient_Kernel_System;


ARCHITECTURE rtl OF Gradient_Kernel_System IS

  -- Component Declarations
  COMPONENT Get_Index_and_Fix_Limits
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Theta                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Index                           :   OUT   vector_of_std_logic_vector8(0 TO 44);  -- uint8 [45]
          Shift                           :   OUT   vector_of_std_logic_vector6(0 TO 44)  -- ufix6 [45]
          );
  END COMPONENT;

  COMPONENT Hough_Kernel_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Edge_rsvd                       :   IN    std_logic;  -- ufix1
          X                               :   IN    std_logic_vector(8 DOWNTO 0);  -- sfix9
          Y                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          Index                           :   IN    vector_of_std_logic_vector8(0 TO 44);  -- uint8 [45]
          vEdge                           :   OUT   std_logic;  -- ufix1
          Rho                             :   OUT   vector_of_std_logic_vector9(0 TO 44)  -- ufix9 [45]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Get_Index_and_Fix_Limits
    USE ENTITY work.Get_Index_and_Fix_Limits(rtl);

  FOR ALL : Hough_Kernel_block
    USE ENTITY work.Hough_Kernel_block(rtl);

  -- Signals
  SIGNAL Get_Index_and_Fix_Limits_out1    : vector_of_std_logic_vector8(0 TO 44);  -- ufix8 [45]
  SIGNAL Get_Index_and_Fix_Limits_out2    : vector_of_std_logic_vector6(0 TO 44);  -- ufix6 [45]
  SIGNAL y_1                              : std_logic;  -- ufix1
  SIGNAL Hough_Kernel_out2                : vector_of_std_logic_vector9(0 TO 44);  -- ufix9 [45]

BEGIN
  u_Get_Index_and_Fix_Limits : Get_Index_and_Fix_Limits
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Theta => Theta,  -- uint8
              Index => Get_Index_and_Fix_Limits_out1,  -- uint8 [45]
              Shift => Get_Index_and_Fix_Limits_out2  -- ufix6 [45]
              );

  u_Hough_Kernel : Hough_Kernel_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Edge_rsvd => Edge_rsvd,  -- ufix1
              X => X,  -- sfix9
              Y => Y,  -- int8
              Index => Get_Index_and_Fix_Limits_out1,  -- uint8 [45]
              vEdge => y_1,  -- ufix1
              Rho => Hough_Kernel_out2  -- ufix9 [45]
              );

  vEdge <= y_1;

  Rho <= Hough_Kernel_out2;

  Shift <= Get_Index_and_Fix_Limits_out2;

END rtl;

